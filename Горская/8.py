import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation

# ============================================================================
# –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ê–Ø –û–°–ù–û–í–ê
# ============================================================================
"""
üî¨ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´
1. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ –õ–∞–ø–ª–∞—Å–∞:

–§–æ—Ä–º—É–ª–∞: ‚àá¬≤u = ‚àÇ¬≤u/‚àÇx¬≤ + ‚àÇ¬≤u/‚àÇy¬≤ = 0
–§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª: –û–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –º–µ–º–±—Ä–∞–Ω–∞)
–¢–∏–ø: –≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —á–∞—Å—Ç–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö

2. –ú–µ—Ç–æ–¥ –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π:

–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö: –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
–§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–∑–ª–æ–≤: u[i,j] = (u[i¬±1,j] + u[i,j¬±1])/4
–ü–æ—Ä—è–¥–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏: O(h¬≤) –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏

3. –ú–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è:

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤
–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –ë—ã—Å—Ç—Ä–µ–µ —Å—Ö–æ–¥–∏—Ç—Å—è, —á–µ–º –º–µ—Ç–æ–¥ –Ø–∫–æ–±–∏
–ö—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞ < –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏


üéØ –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´ –î–õ–Ø –≠–ö–ó–ê–ú–ï–ù–ê
–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–µ–Ω–∏—è (–ø–æ—à–∞–≥–æ–≤–æ):

–î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—Å—Ç–∏ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ —É–∑–ª–æ–≤
–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –õ–∞–ø–ª–∞—Å–∞ ‚Üí –∫–æ–Ω–µ—á–Ω–æ-—Ä–∞–∑–Ω–æ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π ‚Üí —Ñ–∏–∫—Å–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
–ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è –¥–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã:

–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–π –ª–∞–ø–ª–∞—Å–∏–∞–Ω: (u[i+1,j] + u[i-1,j] + u[i,j+1] + u[i,j-1] - 4u[i,j])/h¬≤ = 0
–ò—Ç–µ—Ä–∞—Ü–∏—è –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è: u[i,j]^(new) = (—Å—É–º–º–∞ —Å–æ—Å–µ–¥–µ–π)/4
–ö—Ä–∏—Ç–µ—Ä–∏–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏: max|u^(n+1) - u^(n)| < Œµ


‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –û–®–ò–ë–ö–ò –ò –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:

–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤: u[j,i] —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–∫–µ (x[i], y[j])
–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –ù–µ –∑–∞–±—ã–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã
–°—Ö–æ–¥–∏–º–æ—Å—Ç—å: –ú–æ–∂–µ—Ç –Ω–µ —Å—Ö–æ–¥–∏—Ç—å—Å—è –¥–ª—è –ø–ª–æ—Ö–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–∞–≥–æ–≤ —Å–µ—Ç–∫–∏

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞:

–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–ª–∞—Å—Ç–µ–π, –ø–æ–∫—Ä—ã–≤–∞–µ–º—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π —Å–µ—Ç–∫–æ–π
–¢—Ä–µ–±—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –î–∏—Ä–∏—Ö–ª–µ
–°–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ (O(h¬≤) –∏—Ç–µ—Ä–∞—Ü–∏–π)
"""
"""
–£–†–ê–í–ù–ï–ù–ò–ï –õ–ê–ü–õ–ê–°–ê: ‚àá¬≤u = ‚àÇ¬≤u/‚àÇx¬≤ + ‚àÇ¬≤u/‚àÇy¬≤ = 0

–≠—Ç–æ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ —á–∞—Å—Ç–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ
–ø—Ä–æ—Ü–µ—Å—Å—ã –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤/—Å—Ç–æ–∫–æ–≤ (—É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–µ—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã,
—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –º–µ–º–±—Ä–∞–Ω—ã –∏ —Ç.–¥.)

–ú–ï–¢–û–î –ö–û–ù–ï–ß–ù–´–• –†–ê–ó–ù–û–°–¢–ï–ô:
–ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–æ–Ω–µ—á–Ω–æ-—Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –Ω–∞ —Å–µ—Ç–∫–µ:

‚àÇ¬≤u/‚àÇx¬≤ ‚âà (u[i+1,j] - 2*u[i,j] + u[i-1,j]) / h¬≤
‚àÇ¬≤u/‚àÇy¬≤ ‚âà (u[i,j+1] - 2*u[i,j] + u[i,j-1]) / k¬≤

–≥–¥–µ h, k - —à–∞–≥–∏ —Å–µ—Ç–∫–∏ –ø–æ x –∏ y —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏ (h = k): u[i,j] = (u[i+1,j] + u[i-1,j] + u[i,j+1] + u[i,j-1])/4

–ú–ï–¢–û–î –ì–ê–£–°–°–ê-–ó–ï–ô–î–ï–õ–Ø:
–ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π:
u[i,j]^(n+1) = (u[i+1,j]^(n) + u[i-1,j]^(n+1) + u[i,j+1]^(n) + u[i,j-1]^(n+1))/4
"""

class LaplaceEquationSolver:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è –õ–∞–ø–ª–∞—Å–∞ –Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    –º–µ—Ç–æ–¥–æ–º –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–∞–∑–Ω–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è
    """
    
    def __init__(self, Lx=1.0, Ly=1.0, nx=50, ny=50):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–¥–∞—á–∏
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        Lx, Ly : float
            –†–∞–∑–º–µ—Ä—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ x –∏ y
        nx, ny : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏ –ø–æ x –∏ y (–≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã)
        """
        # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.Lx = Lx  # –î–ª–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ x
        self.Ly = Ly  # –î–ª–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –ø–æ y
        self.nx = nx  # –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ –ø–æ x
        self.ny = ny  # –ß–∏—Å–ª–æ —É–∑–ª–æ–≤ –ø–æ y
        
        # –í—ã—á–∏—Å–ª—è–µ–º —à–∞–≥–∏ —Å–µ—Ç–∫–∏
        self.dx = Lx / (nx - 1)  # –®–∞–≥ –ø–æ x
        self.dy = Ly / (ny - 1)  # –®–∞–≥ –ø–æ y
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏
        self.x = np.linspace(0, Lx, nx)  # –£–∑–ª—ã –ø–æ x
        self.y = np.linspace(0, Ly, ny)  # –£–∑–ª—ã –ø–æ y
        self.X, self.Y = np.meshgrid(self.x, self.y)  # 2D —Å–µ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω—É–ª—è–º–∏
        self.u = np.zeros((ny, nx))  # u[j,i] —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–∫–µ (x[i], y[j])
        
        # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
        self.solution_history = []
        self.residual_history = []
        
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Ç–∫–∞ {nx}√ó{ny}")
        print(f"–®–∞–≥–∏ —Å–µ—Ç–∫–∏: dx = {self.dx:.4f}, dy = {self.dy:.4f}")
    
    def set_boundary_conditions(self, boundary_func=None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –î–∏—Ä–∏—Ö–ª–µ: u = f(x,y) –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        boundary_func : callable or None
            –§—É–Ω–∫—Ü–∏—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π f(x, y)
            –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        if boundary_func is None:
            # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
            # u = 100*sin(œÄ*x) –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ (y = Ly)
            # u = 0 –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
            
            # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (y = 0)
            self.u[0, :] = 0
            
            # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (y = Ly)
            self.u[-1, :] = 100 * np.sin(np.pi * self.x / self.Lx)
            
            # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (x = 0)
            self.u[:, 0] = 0
            
            # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (x = Lx)
            self.u[:, -1] = 0
            
            print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
            print("  u = 0 –Ω–∞ —Ç—Ä–µ—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö")
            print("  u = 100*sin(œÄ*x) –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            for i in range(self.nx):
                self.u[0, i] = boundary_func(self.x[i], 0)
            
            # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            for i in range(self.nx):
                self.u[-1, i] = boundary_func(self.x[i], self.Ly)
            
            # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            for j in range(self.ny):
                self.u[j, 0] = boundary_func(0, self.y[j])
            
            # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            for j in range(self.ny):
                self.u[j, -1] = boundary_func(self.Lx, self.y[j])
            
            print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    
    def gauss_seidel_iteration(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è
        
        –ê–õ–ì–û–†–ò–¢–ú –ì–ê–£–°–°–ê-–ó–ï–ô–î–ï–õ–Ø:
        1. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —É–∑–ª–∞–º —Å–µ—Ç–∫–∏
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç —á–µ—Ç—ã—Ä–µ—Ö —Å–æ—Å–µ–¥–µ–π
        3. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö —É–∑–ª–æ–≤ (–∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å!)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -----------
        max_residual : float
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        """
        max_residual = 0.0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —É–∑–ª–∞–º (–∏—Å–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã)
        for j in range(1, self.ny - 1):  # –æ—Ç 1 –¥–æ ny-2 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
            for i in range(1, self.nx - 1):  # –æ—Ç 1 –¥–æ nx-2 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–≤—è–∑–∫–∏
                u_old = self.u[j, i]
                
                # –ö–õ–Æ–ß–ï–í–ê–Ø –§–û–†–ú–£–õ–ê –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è:
                # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —á–µ—Ç—ã—Ä–µ—Ö —Å–æ—Å–µ–¥–µ–π
                self.u[j, i] = 0.25 * (
                    self.u[j, i+1] +     # –ø—Ä–∞–≤—ã–π —Å–æ—Å–µ–¥
                    self.u[j, i-1] +     # –ª–µ–≤—ã–π —Å–æ—Å–µ–¥ (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!)
                    self.u[j+1, i] +     # –≤–µ—Ä—Ö–Ω–∏–π —Å–æ—Å–µ–¥
                    self.u[j-1, i]       # –Ω–∏–∂–Ω–∏–π —Å–æ—Å–µ–¥ (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω!)
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –Ω–µ–≤—è–∑–∫—É (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é)
                residual = abs(self.u[j, i] - u_old)
                max_residual = max(max_residual, residual)
        
        return max_residual
    
    def solve(self, tolerance=1e-6, max_iterations=10000, save_history=True):
        """
        –†–µ—à–∞–µ—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –õ–∞–ø–ª–∞—Å–∞ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        tolerance : float
            –ö—Ä–∏—Ç–µ—Ä–∏–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞)
        max_iterations : int
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        save_history : bool
            –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—é –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -----------
        iterations : int
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
        converged : bool
            –§–ª–∞–≥ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
        print(f"–ö—Ä–∏—Ç–µ—Ä–∏–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏: {tolerance}")
        print(f"–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if save_history:
            self.solution_history = []
            self.residual_history = []
        
        for iteration in range(max_iterations):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è
            max_residual = self.gauss_seidel_iteration()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            if save_history and (iteration % 10 == 0 or max_residual < tolerance):
                self.solution_history.append(self.u.copy())
                self.residual_history.append(max_residual)
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if iteration % 100 == 0:
                print(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {iteration:5d}: –Ω–µ–≤—è–∑–∫–∞ = {max_residual:.2e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if max_residual < tolerance:
                print(f"–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∑–∞ {iteration + 1} –∏—Ç–µ—Ä–∞—Ü–∏–π")
                print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞: {max_residual:.2e}")
                return iteration + 1, True
        
        print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π ({max_iterations})")
        print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞: {max_residual:.2e}")
        return max_iterations, False
    
    def compute_analytical_solution(self):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        –î–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:
        u(x,0) = 0, u(x,Ly) = 100*sin(œÄ*x/Lx), u(0,y) = u(Lx,y) = 0
        
        –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
        u(x,y) = 100 * sin(œÄ*x/Lx) * sinh(œÄ*y/Lx) / sinh(œÄ*Ly/Lx)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -----------
        u_analytical : ndarray
            –ú–∞—Å—Å–∏–≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        top_boundary = 100 * np.sin(np.pi * self.x / self.Lx)
        if not np.allclose(self.u[-1, :], top_boundary, rtol=1e-10):
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        u_analytical = np.zeros_like(self.u)
        
        for j in range(self.ny):
            for i in range(self.nx):
                x, y = self.x[i], self.y[j]
                u_analytical[j, i] = (100 * np.sin(np.pi * x / self.Lx) * 
                                    np.sinh(np.pi * y / self.Lx) / 
                                    np.sinh(np.pi * self.Ly / self.Lx))
        
        return u_analytical
    
    def plot_solution(self, show_analytical=True, figsize=(15, 5)):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        show_analytical : bool
            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        figsize : tuple
            –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        u_analytical = self.compute_analytical_solution()
        
        if show_analytical and u_analytical is not None:
            fig, axes = plt.subplots(1, 3, figsize=figsize)
        else:
            fig, axes = plt.subplots(1, 2, figsize=(10, 5))
            axes = [axes[0], axes[1], None]
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        cmap = plt.cm.viridis
        
        # 1. –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        im1 = axes[0].contourf(self.X, self.Y, self.u, levels=50, cmap=cmap)
        axes[0].set_title('–ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n(–º–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è)', fontsize=12)
        axes[0].set_xlabel('x')
        axes[0].set_ylabel('y')
        axes[0].set_aspect('equal')
        plt.colorbar(im1, ax=axes[0], label='u(x,y)')
        
        # 2. 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        ax_3d = fig.add_subplot(1, 3 if axes[2] else 2, 2, projection='3d')
        surf = ax_3d.plot_surface(self.X, self.Y, self.u, cmap=cmap, alpha=0.9)
        ax_3d.set_title('3D –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ')
        ax_3d.set_xlabel('x')
        ax_3d.set_ylabel('y')
        ax_3d.set_zlabel('u(x,y)')
        
        # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º
        if show_analytical and u_analytical is not None and axes[2] is not None:
            error = np.abs(self.u - u_analytical)
            im3 = axes[2].contourf(self.X, self.Y, error, levels=50, cmap='Reds')
            axes[2].set_title(f'–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å\nmax = {np.max(error):.2e}', fontsize=12)
            axes[2].set_xlabel('x')
            axes[2].set_ylabel('y')
            axes[2].set_aspect('equal')
            plt.colorbar(im3, ax=axes[2], label='|u_—á–∏—Å–ª–µ–Ω–Ω–æ–µ - u_–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ|')
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏
            print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏:")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {np.max(error):.2e}")
            print(f"–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {np.mean(error):.2e}")
            print(f"RMS –æ—à–∏–±–∫–∞: {np.sqrt(np.mean(error**2)):.2e}")
        
        plt.tight_layout()
        plt.show()
    
    def plot_convergence(self):
        """
        –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        if not self.residual_history:
            print("–ò—Å—Ç–æ—Ä–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return
        
        plt.figure(figsize=(10, 6))
        plt.semilogy(self.residual_history, 'b-o', markersize=4)
        plt.xlabel('–ò—Ç–µ—Ä–∞—Ü–∏—è √ó 10')
        plt.ylabel('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞')
        plt.title('–°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞-–ó–µ–π–¥–µ–ª—è')
        plt.grid(True, alpha=0.3)
        plt.show()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(self.residual_history) > 10:
            # –û—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            ratio = self.residual_history[-1] / self.residual_history[-10]
            convergence_rate = ratio**(1/9)  # –∑–∞ 9 —à–∞–≥–æ–≤
            print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚âà {convergence_rate:.3f}")
    
    def animate_solution(self, filename=None, interval=200):
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        filename : str or None
            –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
        interval : int
            –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if not self.solution_history:
            print("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —à–∫–∞–ª—ã
        vmin = min(np.min(sol) for sol in self.solution_history)
        vmax = max(np.max(sol) for sol in self.solution_history)
        
        def animate(frame):
            ax1.clear()
            ax2.clear()
            
            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ—à–µ–Ω–∏–µ
            im1 = ax1.contourf(self.X, self.Y, self.solution_history[frame], 
                              levels=50, cmap='viridis', vmin=vmin, vmax=vmax)
            ax1.set_title(f'–ò—Ç–µ—Ä–∞—Ü–∏—è {frame * 10}')
            ax1.set_xlabel('x')
            ax1.set_ylabel('y')
            ax1.set_aspect('equal')
            
            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å
            if frame > 0:
                ax2.semilogy(self.residual_history[:frame+1], 'b-o', markersize=4)
            ax2.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏—è √ó 10')
            ax2.set_ylabel('–ù–µ–≤—è–∑–∫–∞')
            ax2.set_title('–°—Ö–æ–¥–∏–º–æ—Å—Ç—å')
            ax2.grid(True, alpha=0.3)
            
            return [im1]
        
        anim = animation.FuncAnimation(fig, animate, frames=len(self.solution_history),
                                     interval=interval, blit=False, repeat=True)
        
        if filename:
            anim.save(filename, writer='pillow')
            print(f"–ê–Ω–∏–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
        else:
            plt.show()
        
        return anim

# ============================================================================
# –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ—à–∞—Ç–µ–ª—è
    """
    print("="*70)
    print("–†–ï–®–ï–ù–ò–ï –£–†–ê–í–ù–ï–ù–ò–Ø –õ–ê–ü–õ–ê–°–ê –ú–ï–¢–û–î–û–ú –ö–û–ù–ï–ß–ù–´–• –†–ê–ó–ù–û–°–¢–ï–ô")
    print("="*70)
    
    # 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ—à–∞—Ç–µ–ª—è
    print("\n1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
    solver = LaplaceEquationSolver(Lx=1.0, Ly=1.0, nx=51, ny=51)
    
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    print("\n2. –ì–†–ê–ù–ò–ß–ù–´–ï –£–°–õ–û–í–ò–Ø")
    solver.set_boundary_conditions()
    
    # 3. –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n3. –ò–¢–ï–†–ê–¶–ò–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï")
    iterations, converged = solver.solve(tolerance=1e-6, max_iterations=5000)
    
    # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n4. –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø")
    solver.plot_solution()
    
    # 5. –ì—Ä–∞—Ñ–∏–∫ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    print("\n5. –ê–ù–ê–õ–ò–ó –°–•–û–î–ò–ú–û–°–¢–ò")
    solver.plot_convergence()
    
    # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –õ–∞–ø–ª–∞—Å–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ç–æ—á–∫–∞—Ö
    laplacian = np.zeros_like(solver.u)
    dx2, dy2 = solver.dx**2, solver.dy**2
    
    for j in range(1, solver.ny-1):
        for i in range(1, solver.nx-1):
            laplacian[j,i] = ((solver.u[j,i+1] - 2*solver.u[j,i] + solver.u[j,i-1])/dx2 +
                             (solver.u[j+1,i] - 2*solver.u[j,i] + solver.u[j-1,i])/dy2)
    
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∞–ø–ª–∞—Å–∏–∞–Ω–∞: {np.max(np.abs(laplacian)):.2e}")
    print(f"(–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ –Ω—É–ª—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è)")
    
    # –≠–Ω–µ—Ä–≥–∏—è —Å–∏—Å—Ç–µ–º—ã (–∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞)
    grad_x = np.gradient(solver.u, solver.dx, axis=1)
    grad_y = np.gradient(solver.u, solver.dy, axis=0)
    energy = 0.5 * np.sum(grad_x**2 + grad_y**2) * solver.dx * solver.dy
    print(f"–≠–Ω–µ—Ä–≥–∏—è —Å–∏—Å—Ç–µ–º—ã: {energy:.6f}")
    
    print("\n" + "="*70)
    print("–†–ï–®–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*70)

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
def demo_different_boundaries():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    """
    print("\n" + "="*50)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–õ–ò–ß–ù–´–• –ì–†–ê–ù–ò–ß–ù–´–• –£–°–õ–û–í–ò–ô")
    print("="*50)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ß–µ—Ç—ã—Ä–µ —Ä–∞–∑–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    def boundary_condition_1(x, y):
        if y == 0:  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            return 0
        elif y == 1:  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            return 100 * x * (1 - x)
        elif x == 0:  # –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            return 50 * y
        else:  # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (x == 1)
            return 25 * y
    
    solver1 = LaplaceEquationSolver(nx=41, ny=41)
    solver1.set_boundary_conditions(boundary_condition_1)
    solver1.solve(tolerance=1e-6)
    
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.contourf(solver1.X, solver1.Y, solver1.u, levels=50, cmap='viridis')
    plt.colorbar(label='u(x,y)')
    plt.title('–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\nu(x,0)=0, u(x,1)=100x(1-x)\nu(0,y)=50y, u(1,y)=25y')
    plt.xlabel('x')
    plt.ylabel('y')
    
    # –ü—Ä–∏–º–µ—Ä 2: –ö—Ä—É–≥–æ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–µ
    def boundary_condition_2(x, y):
        # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –∫—Ä—É–≥–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –∫–≤–∞–¥—Ä–∞—Ç–∞
        return 100 * np.sin(2 * np.pi * x) * np.sin(2 * np.pi * y)
    
    solver2 = LaplaceEquationSolver(nx=41, ny=41)
    solver2.set_boundary_conditions(boundary_condition_2)
    solver2.solve(tolerance=1e-6)
    
    plt.subplot(1, 2, 2)
    plt.contourf(solver2.X, solver2.Y, solver2.u, levels=50, cmap='plasma')
    plt.colorbar(label='u(x,y)')
    plt.title('–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:\nu = 100sin(2œÄx)sin(2œÄy) –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ')
    plt.xlabel('x')
    plt.ylabel('y')
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    main()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    demo_different_boundaries()
    
    print("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é —É—Ä–∞–≤–Ω–µ–Ω–∏—è –õ–∞–ø–ª–∞—Å–∞!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 110/100 –±–∞–ª–ª–æ–≤! üöÄ")